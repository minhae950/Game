[
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "Ursina",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "Entity",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "Pipe",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "scene",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "EditorCamera",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "color",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "moviepy.editor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "InteractableCube",
        "kind": 6,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "class InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,\n            name=name,\n            **kwargs\n        )",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "def update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()\n        if held_keys['e']:  # 'E' 키를 눌러 상호작용\n            hovered_entity.interact()\n        # 이전에 다른 오브젝트를 가리키고 있었을 경우, on_unhover 메서드 호출",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "app = Ursina()\nground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\n# InteractableCube 클래스 정의\nclass InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "ground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\n# InteractableCube 클래스 정의\nclass InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,\n            name=name,",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "player = FirstPersonController()\n# 상호작용할 수 있는 큐브 생성\ncube1 = InteractableCube(name='Cube 1', color=color.azure, position=(3, 1, 3))\ncube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "cube1",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "cube1 = InteractableCube(name='Cube 1', color=color.azure, position=(3, 1, 3))\ncube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "cube2",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "cube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "code_test.hoverring",
        "description": "code_test.hoverring",
        "peekOfCode": "previous_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()\n        if held_keys['e']:  # 'E' 키를 눌러 상호작용\n            hovered_entity.interact()",
        "detail": "code_test.hoverring",
        "documentation": {}
    },
    {
        "label": "InteractableCube",
        "kind": 6,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "class InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,\n            rotation=rotation,",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "show_text",
        "kind": 2,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "def show_text(text, duration=2):\n    message = Text(text, position=(0, -0.2), origin=(0, 0), scale=2)\n    invoke(message.disable, delay=duration)\n    return duration\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "def update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()\n            if hovered_entity.name == 'man1':\n                show_text(\"hello, I'm 1\", 2)",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "app = Ursina()\nground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\nplayer = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "ground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\nplayer = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "player = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "texts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "cube1",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "cube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "cube2",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "cube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "code_test.interrection",
        "description": "code_test.interrection",
        "peekOfCode": "previous_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()\n            if hovered_entity.name == 'man1':",
        "detail": "code_test.interrection",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "code_test.light",
        "description": "code_test.light",
        "peekOfCode": "def update():\n    cube.set_shader_input(\"highlight_color\", color.black)  # 윤곽선 적용\napp.run()",
        "detail": "code_test.light",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.light",
        "description": "code_test.light",
        "peekOfCode": "app = Ursina()\ncube = Entity(model='cube', color=color.orange, scale=(2, 2, 2), position=(0, 1, 0), collider='box')\ncube.highlight_color = color.black  # 윤곽선 색상 설정\ndef update():\n    cube.set_shader_input(\"highlight_color\", color.black)  # 윤곽선 적용\napp.run()",
        "detail": "code_test.light",
        "documentation": {}
    },
    {
        "label": "cube",
        "kind": 5,
        "importPath": "code_test.light",
        "description": "code_test.light",
        "peekOfCode": "cube = Entity(model='cube', color=color.orange, scale=(2, 2, 2), position=(0, 1, 0), collider='box')\ncube.highlight_color = color.black  # 윤곽선 색상 설정\ndef update():\n    cube.set_shader_input(\"highlight_color\", color.black)  # 윤곽선 적용\napp.run()",
        "detail": "code_test.light",
        "documentation": {}
    },
    {
        "label": "cube.highlight_color",
        "kind": 5,
        "importPath": "code_test.light",
        "description": "code_test.light",
        "peekOfCode": "cube.highlight_color = color.black  # 윤곽선 색상 설정\ndef update():\n    cube.set_shader_input(\"highlight_color\", color.black)  # 윤곽선 적용\napp.run()",
        "detail": "code_test.light",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "def input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "app = Ursina()\ne = Button(parent=scene, model='sphere', x=2)\ne.collider = 'box'          # add BoxCollider based on entity's bounds.\ne.collider = 'sphere'       # add SphereCollider based on entity's bounds.\ne.collider = 'capsule'      # add CapsuleCollider based on entity's bounds.\ne.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e = Button(parent=scene, model='sphere', x=2)\ne.collider = 'box'          # add BoxCollider based on entity's bounds.\ne.collider = 'sphere'       # add SphereCollider based on entity's bounds.\ne.collider = 'capsule'      # add CapsuleCollider based on entity's bounds.\ne.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = 'box'          # add BoxCollider based on entity's bounds.\ne.collider = 'sphere'       # add SphereCollider based on entity's bounds.\ne.collider = 'capsule'      # add CapsuleCollider based on entity's bounds.\ne.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = 'sphere'       # add SphereCollider based on entity's bounds.\ne.collider = 'capsule'      # add CapsuleCollider based on entity's bounds.\ne.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = 'capsule'      # add CapsuleCollider based on entity's bounds.\ne.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = 'mesh'         # add MeshCollider matching the entity's model.\ne.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = 'file_name'    # load a model and us it as MeshCollider.\ne.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = e.model        # copy target model/Mesh and use it as MeshCollider.\ne.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = BoxCollider(e, center=Vec3(0,0,0), size=Vec3(1,1,1))           # add BoxCollider at custom positions and size.\ne.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = SphereCollider(e, center=Vec3(0,0,0), radius=.75)              # add SphereCollider at custom positions and size.\ne.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = CapsuleCollider(e, center=Vec3(0,0,0), height=3, radius=.75)   # add CapsuleCollider at custom positions and size.\ne.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e.collider",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e.collider = MeshCollider(e, mesh=e.model, center=Vec3(0,0,0))              # add MeshCollider with custom shape and center.\nm = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "m = Pipe(base_shape=Circle(6), thicknesses=(1, .5))\ne = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "e = Button(parent=scene, model='cube', collider='mesh', color=color.red, highlight_color=color.yellow)\nsphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "sphere",
        "kind": 5,
        "importPath": "code_test.mesh_collider",
        "description": "code_test.mesh_collider",
        "peekOfCode": "sphere = Button(parent=scene, model='icosphere', collider='mesh', color=color.red, highlight_color=color.yellow, x=4)\nEditorCamera()\ndef input(key):\n    if key == 'c':\n        e.collider = None\napp.run()",
        "detail": "code_test.mesh_collider",
        "documentation": {}
    },
    {
        "label": "show_temporary_text",
        "kind": 2,
        "importPath": "code_test.Text_test",
        "description": "code_test.Text_test",
        "peekOfCode": "def show_temporary_text(text, duration=2):\n    # 텍스트 생성\n    message = Text(text, position=(0, 0.4), origin=(0, 0), scale=2)\n    # 일정 시간 후에 텍스트 제거\n    invoke(message.disable, delay=duration)\n    return duration  # 다음 텍스트를 표시할 시간을 위해 duration 반환\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        # 각 텍스트를 표시하는 함수를 invoke로 예약",
        "detail": "code_test.Text_test",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "code_test.Text_test",
        "description": "code_test.Text_test",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        # 각 텍스트를 표시하는 함수를 invoke로 예약\n        invoke(show_temporary_text, text, interval, delay=total_time)\n        total_time += interval  # 각 텍스트가 표시되는 시간을 누적\n# 텍스트 시퀀스 예제\ntexts = [\"Hello, World!\", \"Welcome to Ursina!\", \"This is a sequence of messages.\"]\n# 텍스트를 순차적으로 2초 간격으로 표시\nshow_text_sequence(texts, interval=2)",
        "detail": "code_test.Text_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.Text_test",
        "description": "code_test.Text_test",
        "peekOfCode": "app = Ursina()\ndef show_temporary_text(text, duration=2):\n    # 텍스트 생성\n    message = Text(text, position=(0, 0.4), origin=(0, 0), scale=2)\n    # 일정 시간 후에 텍스트 제거\n    invoke(message.disable, delay=duration)\n    return duration  # 다음 텍스트를 표시할 시간을 위해 duration 반환\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:",
        "detail": "code_test.Text_test",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "code_test.Text_test",
        "description": "code_test.Text_test",
        "peekOfCode": "texts = [\"Hello, World!\", \"Welcome to Ursina!\", \"This is a sequence of messages.\"]\n# 텍스트를 순차적으로 2초 간격으로 표시\nshow_text_sequence(texts, interval=2)\napp.run()",
        "detail": "code_test.Text_test",
        "documentation": {}
    },
    {
        "label": "reduce_health",
        "kind": 2,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "def reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:\n        gameover_text = Text(text='Game Over', position=(-0.1, 0.015), scale=1.5, parent=camera.ui)\ndef reduce_ammo():\n    current_ammo = int(ammo_count.text.split(': ')[1])",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "reduce_ammo",
        "kind": 2,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "def reduce_ammo():\n    current_ammo = int(ammo_count.text.split(': ')[1])\n    if current_ammo > 0:\n        current_ammo -= 1\n        ammo_count.text = f'Ammo: {current_ammo}'\ndef input(key):\n    if key == 'space':\n        reduce_health()\n        reduce_ammo()\n    if key == 'escape':",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "def input(key):\n    if key == 'space':\n        reduce_health()\n        reduce_ammo()\n    if key == 'escape':\n        application.quit()\napp.run()",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "app = Ursina()\n# 플레이어 설정\nplayer = fpc()\n# 바닥 생성\nfloor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "player = fpc()\n# 바닥 생성\nfloor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "floor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "health_bar_background",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "health_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "health_bar",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "health_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "health_text",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "health_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "ammo_count",
        "kind": 5,
        "importPath": "code_test.UI_test",
        "description": "code_test.UI_test",
        "peekOfCode": "ammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:\n        gameover_text = Text(text='Game Over', position=(-0.1, 0.015), scale=1.5, parent=camera.ui)",
        "detail": "code_test.UI_test",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "class Human(Entity):\n    def __init__(self, name, model, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), texture='', **kwargs):\n        super().__init__(\n            model=model,\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,\n            rotation=rotation,",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Interactable",
        "kind": 6,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "class Interactable(Entity):\n    def __init__(self, type, model, position=(), scale=(), rotation=(), texture='', **kwargs):\n        super().__init__(\n            type = type,\n            model = model,\n            position=position,\n            collider = MeshCollider(self),\n            scale=scale,\n            rotation=rotation,\n            texture=texture,",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "def input(key):\n    global hand_visible\n    global cursur_lock\n    #run key\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': \n        player.speed = 5\n    #item uses\n    if key == '1':",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "show_text",
        "kind": 2,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "def show_text(text, duration=2, position=(0, -0.2)):\n    message = Text(text, position=position, origin=(0, 0), scale=2, color=color.black, font='assets/fonts/neodgm.ttf')\n    invoke(message.disable, delay=duration)\n    return duration\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ndef update():",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ndef update():\n    print(player.position) #for check\n    #point_light.position = player.position\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "def update():\n    print(player.position) #for check\n    #point_light.position = player.position\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, Human):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "quit_game",
        "kind": 2,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "def quit_game():\n    application.quit()\napp.run()",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "app = Ursina()\n# window.size = (sys.argv[2], sys.argv[3])\n#model import\nman = 'man.obj'\n#class\nclass Human(Entity):\n    def __init__(self, name, model, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), texture='', **kwargs):\n        super().__init__(\n            model=model,\n            name=name,",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "man",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "man = 'man.obj'\n#class\nclass Human(Entity):\n    def __init__(self, name, model, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), texture='', **kwargs):\n        super().__init__(\n            model=model,\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_ground",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_ground = Entity(model = 'ground.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_ceiling = Entity(model = 'ceiling.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_front_wall = Entity(model = 'front wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_door = Entity(model = 'door.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_left_wall = Entity(model = 'leftwall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_ceiling",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_ceiling = Entity(model = 'ceiling.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_front_wall = Entity(model = 'front wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_door = Entity(model = 'door.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_left_wall = Entity(model = 'leftwall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_front_wall",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_front_wall = Entity(model = 'front wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_door = Entity(model = 'door.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_left_wall = Entity(model = 'leftwall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_door",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_door = Entity(model = 'door.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_left_wall = Entity(model = 'leftwall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_left_wall",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_left_wall = Entity(model = 'leftwall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_right_wall",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_right_wall = Entity(model = 'right wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_central_wall",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_central_wall = Entity(model = 'central wall.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_stairs",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_stairs = Entity(model = 'stairs.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_stair_wall1",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_stair_wall1 = Entity(model = 'stair wall1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_stair_wall2",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_stair_wall2 = Entity(model = 'stair wall2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_stair_wall3",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_stair_wall3 = Entity(model = 'stair wall3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_stair_wall4",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_stair_wall4 = Entity(model = 'stair wall4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair1",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair1 = Entity(model = 'chair1.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair2",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair2 = Entity(model = 'chair2.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair3",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair3 = Entity(model = 'chair3.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair4",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair4 = Entity(model = 'chair4.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair5",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair5 = Entity(model = 'chair5.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair6",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair6 = Entity(model = 'chair6.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair7",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair7 = Entity(model = 'chair7.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\nModel_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Model_chair8",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Model_chair8 = Entity(model = 'chair8.obj', scale = (0.37, 0.37, 0.37), position = (-10, -0.8, -20), collider='box')\n#Human\nJames = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "James",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "James = Human(name='James', model='man', position=(-2, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDoyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Doyun",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Doyun = Human(name='도윤', model='man', position=(-12, -0.4, -14), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 180))\nJhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Jhon",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Jhon = Human(name='Jhon', model='man', position=(-2, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDavid = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "David",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "David = Human(name='David', model='man', position=(-2, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nJessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth\nRinger: David, Margaret",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Jessica",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Jessica = Human(name='David', model='man', position=(-4, -0.4, 0), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nDorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth\nRinger: David, Margaret\n\"\"\"",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Dorothy",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Dorothy = Human(name='David', model='man', position=(-4, -0.4, 2), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nElizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth\nRinger: David, Margaret\n\"\"\"\n#Man",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Elizabeth",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Elizabeth = Human(name='David', model='man', position=(-4, -0.4, 4), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\nMargaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth\nRinger: David, Margaret\n\"\"\"\n#Man\ntext_James = [\"제 몸에 기생충이 있는것 같아요.\", \"위를 갉아먹는 느낌이에요.\", \"기생충 좀 빼주세요.\"]",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "Margaret",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "Margaret = Human(name='David', model='man', position=(-4, -0.4, 6), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, -90))\n#dialog\n\"\"\"\nX-ray: James, Jessica, Dorothy\nStethoscope: Robert, Jhon, Elizabeth\nRinger: David, Margaret\n\"\"\"\n#Man\ntext_James = [\"제 몸에 기생충이 있는것 같아요.\", \"위를 갉아먹는 느낌이에요.\", \"기생충 좀 빼주세요.\"]\ntext_Doyun = [\"너무 많이 뛰었더니,\", \"심장이 빨라져서 돌아오지 않아요.\", \"도와주세요.\"]",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_James",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_James = [\"제 몸에 기생충이 있는것 같아요.\", \"위를 갉아먹는 느낌이에요.\", \"기생충 좀 빼주세요.\"]\ntext_Doyun = [\"너무 많이 뛰었더니,\", \"심장이 빨라져서 돌아오지 않아요.\", \"도와주세요.\"]\ntext_Jhon = [\"제가 아끼는 여자친구와 헤어졌어요.\", \"너무 슬퍼서 힘들어요.\", \"몸에 무슨 문제가 있는지 확인해주세요.\"]\ntext_David = [\"사고로 피를 너무 많이 흘렸어요.\", \"수혈팩을 맞아야하는데, 도와주세요.\"]\n#Woman\ntext_Jessica = [\"아들이 장난감을 삼켰어요.\", \"숨을 못쉬고 있어요.\", \"제발 도와주세요.\"]\ntext_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Doyun",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Doyun = [\"너무 많이 뛰었더니,\", \"심장이 빨라져서 돌아오지 않아요.\", \"도와주세요.\"]\ntext_Jhon = [\"제가 아끼는 여자친구와 헤어졌어요.\", \"너무 슬퍼서 힘들어요.\", \"몸에 무슨 문제가 있는지 확인해주세요.\"]\ntext_David = [\"사고로 피를 너무 많이 흘렸어요.\", \"수혈팩을 맞아야하는데, 도와주세요.\"]\n#Woman\ntext_Jessica = [\"아들이 장난감을 삼켰어요.\", \"숨을 못쉬고 있어요.\", \"제발 도와주세요.\"]\ntext_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Jhon",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Jhon = [\"제가 아끼는 여자친구와 헤어졌어요.\", \"너무 슬퍼서 힘들어요.\", \"몸에 무슨 문제가 있는지 확인해주세요.\"]\ntext_David = [\"사고로 피를 너무 많이 흘렸어요.\", \"수혈팩을 맞아야하는데, 도와주세요.\"]\n#Woman\ntext_Jessica = [\"아들이 장난감을 삼켰어요.\", \"숨을 못쉬고 있어요.\", \"제발 도와주세요.\"]\ntext_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_David",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_David = [\"사고로 피를 너무 많이 흘렸어요.\", \"수혈팩을 맞아야하는데, 도와주세요.\"]\n#Woman\ntext_Jessica = [\"아들이 장난감을 삼켰어요.\", \"숨을 못쉬고 있어요.\", \"제발 도와주세요.\"]\ntext_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Jessica",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Jessica = [\"아들이 장난감을 삼켰어요.\", \"숨을 못쉬고 있어요.\", \"제발 도와주세요.\"]\ntext_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Dorothy",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Dorothy = [\"저.. 몸.. 귀신..\", \"도와주세..요\"]\ntext_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Elizabeth",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Elizabeth = [\"평소에 커피와 담배를 가까이 하는 직장인이에요.\", \"요즘들어 심장이 빨리뛰는 것 같아요.\", \"제게 문제가 있는걸까요?\"]\ntext_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\nplayer.jump_height = 1.5",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "text_Margaret",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "text_Margaret = [\"감기에 걸려서 링거를 맞고있어요.\", \"근데 어지럽고 이상한 느낌이 들어요.\", \"듣기로는 A팩을 받아야한다는데, 잘 진행되고 있는건가요?\"]\n#Sounds\nmain_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\nplayer.jump_height = 1.5\ncamera.fov = 100",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "main_theme",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "main_theme = Audio(sound_file_name='assets/music/night-in-kyoto.mp3', volume=0.1, autoplay=False)\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\nplayer.jump_height = 1.5\ncamera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "card",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "card = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\nplayer.jump_height = 1.5\ncamera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))\n# light.color = color.white  # 빛의 색상 설정\n# point_light = PointLight(parent=player, color=color.white, position=(0, 0, 0), shadows=True)",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "card.visible",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "card.visible = False\n#fucking player settings\nplayer = FirstPersonController()\nplayer.jump_height = 1.5\ncamera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))\n# light.color = color.white  # 빛의 색상 설정\n# point_light = PointLight(parent=player, color=color.white, position=(0, 0, 0), shadows=True)\n# point_light1 = PointLight(parent=player, color=color.white, position=(1, 0, 20), shadows=True)",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "player = FirstPersonController()\nplayer.jump_height = 1.5\ncamera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))\n# light.color = color.white  # 빛의 색상 설정\n# point_light = PointLight(parent=player, color=color.white, position=(0, 0, 0), shadows=True)\n# point_light1 = PointLight(parent=player, color=color.white, position=(1, 0, 20), shadows=True)\n# point_light.range = 100\n# point_light.intensity = 5",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "player.jump_height",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "player.jump_height = 1.5\ncamera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))\n# light.color = color.white  # 빛의 색상 설정\n# point_light = PointLight(parent=player, color=color.white, position=(0, 0, 0), shadows=True)\n# point_light1 = PointLight(parent=player, color=color.white, position=(1, 0, 20), shadows=True)\n# point_light.range = 100\n# point_light.intensity = 5\n#UI",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "camera.fov",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "camera.fov = 100\n# light = DirectionalLight(shadows=True, position=(0, 5, 0), look_at=(0, 0, 0))\n# light = AmbientLight(shadows=True, position=(0, 0, 0), look_at=(0, 0, 0))\n# light.color = color.white  # 빛의 색상 설정\n# point_light = PointLight(parent=player, color=color.white, position=(0, 0, 0), shadows=True)\n# point_light1 = PointLight(parent=player, color=color.white, position=(1, 0, 20), shadows=True)\n# point_light.range = 100\n# point_light.intensity = 5\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "hand",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "hand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visible = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "hand.position",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "hand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visible = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "hand.rotation",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "hand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visible = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "hand_visible",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "hand_visible = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):\n    global hand_visible\n    global cursur_lock",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "hand.visible",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "hand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):\n    global hand_visible\n    global cursur_lock\n    #run key",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "cursur_lock",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "cursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):\n    global hand_visible\n    global cursur_lock\n    #run key\n    if key == 'left shift':",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "card_visible",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "card_visible = False\nprevious_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):\n    global hand_visible\n    global cursur_lock\n    #run key\n    if key == 'left shift':\n        player.speed = 10",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "Game",
        "description": "Game",
        "peekOfCode": "previous_hovered_entity = None\n#start\nmain_theme.play()\ndef input(key):\n    global hand_visible\n    global cursur_lock\n    #run key\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': ",
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "runChildProcessTarget",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def runChildProcessTarget(vol, width, height):\n    # exec(open('gamert.py').read())\n    # os.system(execPath + \" \" + str(vol) + \" \" + str(width) + \" \" + str(height))\n    subprocess.Popen(args=[sys.executable, \"Game.py\", str(vol), str(width), str(height)])\n    # print(\"SubProcess POPENed\") # For Debugging Purpose\n    # pygame.quit()\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((1366, 768))\n    pygame.display.set_caption(\"벤조디아제핀\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    pygame.init()\n    screen = pygame.display.set_mode((1366, 768))\n    pygame.display.set_caption(\"벤조디아제핀\")\n    _intro_vid = mp.VideoFileClip(\"assets/videos/intro.mp4\")\n    intro_vid = _intro_vid.resize(height=768)\n    keepRunning = True\n    clk = pygame.time.Clock() # Sorry for dirty names; clock was already defined in other module\n    pixelFont_128 = pygame.font.Font(\"assets/fonts/neodgm.ttf\", 128)\n    pixelFont_64 = pygame.font.Font(\"assets/fonts/neodgm.ttf\", 64)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "PIL.Image.ANTIALIAS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "PIL.Image.ANTIALIAS = PIL.Image.LANCZOS\nbacKground_music = pygame.mixer.Sound('assets/music/alone-musikal.mp3')\ndef runChildProcessTarget(vol, width, height):\n    # exec(open('gamert.py').read())\n    # os.system(execPath + \" \" + str(vol) + \" \" + str(width) + \" \" + str(height))\n    subprocess.Popen(args=[sys.executable, \"Game.py\", str(vol), str(width), str(height)])\n    # print(\"SubProcess POPENed\") # For Debugging Purpose\n    # pygame.quit()\ndef main():\n    pygame.init()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "bacKground_music",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "bacKground_music = pygame.mixer.Sound('assets/music/alone-musikal.mp3')\ndef runChildProcessTarget(vol, width, height):\n    # exec(open('gamert.py').read())\n    # os.system(execPath + \" \" + str(vol) + \" \" + str(width) + \" \" + str(height))\n    subprocess.Popen(args=[sys.executable, \"Game.py\", str(vol), str(width), str(height)])\n    # print(\"SubProcess POPENed\") # For Debugging Purpose\n    # pygame.quit()\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((1366, 768))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "def draw_grid():\n    for x in range(0, WIDTH, GRID_SIZE):\n        for y in range(0, HEIGHT, GRID_SIZE):\n            rect = pygame.Rect(x, y, GRID_SIZE, GRID_SIZE)\n            pygame.draw.rect(screen, BLACK, rect, 1)\ndef check_collision(car, dx, dy):\n    \"\"\"차량이 다른 차량 또는 화면 경계와 충돌하는지 확인.\"\"\"\n    new_rect = car[\"rect\"].move(dx, dy)\n    # 화면 경계 충돌 확인\n    if new_rect.left < 0 or new_rect.right > WIDTH or new_rect.top < 0 or new_rect.bottom > HEIGHT:",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "check_collision",
        "kind": 2,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "def check_collision(car, dx, dy):\n    \"\"\"차량이 다른 차량 또는 화면 경계와 충돌하는지 확인.\"\"\"\n    new_rect = car[\"rect\"].move(dx, dy)\n    # 화면 경계 충돌 확인\n    if new_rect.left < 0 or new_rect.right > WIDTH or new_rect.top < 0 or new_rect.bottom > HEIGHT:\n        return True\n    # 다른 차량과 충돌 확인\n    for other_car in CARS:\n        if other_car != car and new_rect.colliderect(other_car[\"rect\"]):\n            return True",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Rush Hour')\n# 색상 설정\nWHITE = (255, 255, 255)\nRED = (255, 0, 0)\nBLUE = (0, 0, 255)\nGREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "WHITE = (255, 255, 255)\nRED = (255, 0, 0)\nBLUE = (0, 0, 255)\nGREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "RED = (255, 0, 0)\nBLUE = (0, 0, 255)\nGREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "BLUE = (0, 0, 255)\nGREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},\n    {\"rect\": pygame.Rect(500, 100, GRID_SIZE, GRID_SIZE * 2), \"color\": (255, 255, 0), \"vertical\": True},",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "GREEN = (0, 255, 0)\nBLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},\n    {\"rect\": pygame.Rect(500, 100, GRID_SIZE, GRID_SIZE * 2), \"color\": (255, 255, 0), \"vertical\": True},\n]",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "BLACK = (0, 0, 0)\n# 차량 크기와 설정\nGRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},\n    {\"rect\": pygame.Rect(500, 100, GRID_SIZE, GRID_SIZE * 2), \"color\": (255, 255, 0), \"vertical\": True},\n]\n# 게임 루프",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "GRID_SIZE",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "GRID_SIZE = 100\nCARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},\n    {\"rect\": pygame.Rect(500, 100, GRID_SIZE, GRID_SIZE * 2), \"color\": (255, 255, 0), \"vertical\": True},\n]\n# 게임 루프\nrunning = True\nselected_car_index = 0  # 키보드로 선택할 차량",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "CARS",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "CARS = [\n    {\"rect\": pygame.Rect(300, 300, GRID_SIZE, GRID_SIZE * 2), \"color\": BLUE, \"vertical\": True},\n    {\"rect\": pygame.Rect(100, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": RED, \"vertical\": False},\n    {\"rect\": pygame.Rect(300, 100, GRID_SIZE * 2, GRID_SIZE), \"color\": GREEN, \"vertical\": False},\n    {\"rect\": pygame.Rect(500, 100, GRID_SIZE, GRID_SIZE * 2), \"color\": (255, 255, 0), \"vertical\": True},\n]\n# 게임 루프\nrunning = True\nselected_car_index = 0  # 키보드로 선택할 차량\nMOVE_SPEED = GRID_SIZE  # 차량을 한 번에 이동시키는 단위",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "running = True\nselected_car_index = 0  # 키보드로 선택할 차량\nMOVE_SPEED = GRID_SIZE  # 차량을 한 번에 이동시키는 단위\ndef draw_grid():\n    for x in range(0, WIDTH, GRID_SIZE):\n        for y in range(0, HEIGHT, GRID_SIZE):\n            rect = pygame.Rect(x, y, GRID_SIZE, GRID_SIZE)\n            pygame.draw.rect(screen, BLACK, rect, 1)\ndef check_collision(car, dx, dy):\n    \"\"\"차량이 다른 차량 또는 화면 경계와 충돌하는지 확인.\"\"\"",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "selected_car_index",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "selected_car_index = 0  # 키보드로 선택할 차량\nMOVE_SPEED = GRID_SIZE  # 차량을 한 번에 이동시키는 단위\ndef draw_grid():\n    for x in range(0, WIDTH, GRID_SIZE):\n        for y in range(0, HEIGHT, GRID_SIZE):\n            rect = pygame.Rect(x, y, GRID_SIZE, GRID_SIZE)\n            pygame.draw.rect(screen, BLACK, rect, 1)\ndef check_collision(car, dx, dy):\n    \"\"\"차량이 다른 차량 또는 화면 경계와 충돌하는지 확인.\"\"\"\n    new_rect = car[\"rect\"].move(dx, dy)",
        "detail": "mini_game1",
        "documentation": {}
    },
    {
        "label": "MOVE_SPEED",
        "kind": 5,
        "importPath": "mini_game1",
        "description": "mini_game1",
        "peekOfCode": "MOVE_SPEED = GRID_SIZE  # 차량을 한 번에 이동시키는 단위\ndef draw_grid():\n    for x in range(0, WIDTH, GRID_SIZE):\n        for y in range(0, HEIGHT, GRID_SIZE):\n            rect = pygame.Rect(x, y, GRID_SIZE, GRID_SIZE)\n            pygame.draw.rect(screen, BLACK, rect, 1)\ndef check_collision(car, dx, dy):\n    \"\"\"차량이 다른 차량 또는 화면 경계와 충돌하는지 확인.\"\"\"\n    new_rect = car[\"rect\"].move(dx, dy)\n    # 화면 경계 충돌 확인",
        "detail": "mini_game1",
        "documentation": {}
    }
]