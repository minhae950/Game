[
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ursina",
        "description": "ursina",
        "isExtraImport": true,
        "detail": "ursina",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "FirstPersonController",
        "importPath": "ursina.prefabs.first_person_controller",
        "description": "ursina.prefabs.first_person_controller",
        "isExtraImport": true,
        "detail": "ursina.prefabs.first_person_controller",
        "documentation": {}
    },
    {
        "label": "InteractableCube",
        "kind": 6,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "class InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,\n            name=name,  # 엔티티 이름 지정\n            **kwargs\n        )",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "def update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()\n        if held_keys['e']:  # 'E' 키를 눌러 상호작용\n            hovered_entity.interact()\n        # 이전에 다른 오브젝트를 가리키고 있었을 경우, on_unhover 메서드 호출",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "app = Ursina()\nground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\n# InteractableCube 클래스 정의\nclass InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "ground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\n# InteractableCube 클래스 정의\nclass InteractableCube(Entity):\n    def __init__(self, name, color=color.azure, position=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='cube',\n            color=color,\n            collider='box',\n            position=position,\n            name=name,  # 엔티티 이름 지정",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "player = FirstPersonController()\n# 상호작용할 수 있는 큐브 생성\ncube1 = InteractableCube(name='Cube 1', color=color.azure, position=(3, 1, 3))\ncube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "cube1",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "cube1 = InteractableCube(name='Cube 1', color=color.azure, position=(3, 1, 3))\ncube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "cube2",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "cube2 = InteractableCube(name='Cube 2', color=color.orange, position=(-3, 1, -3))\n# 이전에 마우스 커서를 올렸던 오브젝트를 추적하기 위한 변수\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "hoverring",
        "description": "hoverring",
        "peekOfCode": "previous_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        # 마우스 커서를 올린 오브젝트에서 on_hover 메서드 호출\n        hovered_entity.on_hover()\n        if held_keys['e']:  # 'E' 키를 눌러 상호작용\n            hovered_entity.interact()",
        "detail": "hoverring",
        "documentation": {}
    },
    {
        "label": "InteractableCube",
        "kind": 6,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "class InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,\n            rotation=rotation,",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "show_text",
        "kind": 2,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "def show_text(text, duration=2):\n    message = Text(text, position=(0, -0.2), origin=(0, 0), scale=2)\n    invoke(message.disable, delay=duration)\n    return duration\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "def update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()\n            if hovered_entity.name == 'man1':\n                show_text(\"hello, I'm 1\", 2)",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "app = Ursina()\nground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\nplayer = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "ground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\nplayer = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "player = FirstPersonController()\ntexts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "texts = [\"Hello, Doctor!\", \"Can you help me?\"]\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "cube1",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "cube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "cube2",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "cube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\nprevious_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "interrection",
        "description": "interrection",
        "peekOfCode": "previous_hovered_entity = None\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()\n            if hovered_entity.name == 'man1':",
        "detail": "interrection",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "def update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기\n    if held_keys['space']:\n        if model_visible:\n            model_entity.visible = False\n        else:\n            model_entity.visible = True\n        model_visible = not model_visible  # 상태 반전\napp.run()",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "app = Ursina()\nplayer = FirstPersonController()\n# 3D 모델 엔티티 생성\nmodel_path = 'man.obj'  # 모델 파일의 경로를 지정합니다.\nmodel_entity = Entity(model=model_path, scale=(1, 1, 1), color=color.orange)\nmodel_entity.rotation = ()\n# 모델의 가시성을 제어할 변수\nmodel_visible = True\ndef update():\n    global model_visible",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "player = FirstPersonController()\n# 3D 모델 엔티티 생성\nmodel_path = 'man.obj'  # 모델 파일의 경로를 지정합니다.\nmodel_entity = Entity(model=model_path, scale=(1, 1, 1), color=color.orange)\nmodel_entity.rotation = ()\n# 모델의 가시성을 제어할 변수\nmodel_visible = True\ndef update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "model_path = 'man.obj'  # 모델 파일의 경로를 지정합니다.\nmodel_entity = Entity(model=model_path, scale=(1, 1, 1), color=color.orange)\nmodel_entity.rotation = ()\n# 모델의 가시성을 제어할 변수\nmodel_visible = True\ndef update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기\n    if held_keys['space']:\n        if model_visible:",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "model_entity",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "model_entity = Entity(model=model_path, scale=(1, 1, 1), color=color.orange)\nmodel_entity.rotation = ()\n# 모델의 가시성을 제어할 변수\nmodel_visible = True\ndef update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기\n    if held_keys['space']:\n        if model_visible:\n            model_entity.visible = False",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "model_entity.rotation",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "model_entity.rotation = ()\n# 모델의 가시성을 제어할 변수\nmodel_visible = True\ndef update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기\n    if held_keys['space']:\n        if model_visible:\n            model_entity.visible = False\n        else:",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "model_visible",
        "kind": 5,
        "importPath": "quterview",
        "description": "quterview",
        "peekOfCode": "model_visible = True\ndef update():\n    global model_visible\n    # 스페이스 키를 눌러서 모델 숨기기 또는 보이기\n    if held_keys['space']:\n        if model_visible:\n            model_entity.visible = False\n        else:\n            model_entity.visible = True\n        model_visible = not model_visible  # 상태 반전",
        "detail": "quterview",
        "documentation": {}
    },
    {
        "label": "show_temporary_text",
        "kind": 2,
        "importPath": "Text_test",
        "description": "Text_test",
        "peekOfCode": "def show_temporary_text(text, duration=2):\n    # 텍스트 생성\n    message = Text(text, position=(0, 0.4), origin=(0, 0), scale=2)\n    # 일정 시간 후에 텍스트 제거\n    invoke(message.disable, delay=duration)\n    return duration  # 다음 텍스트를 표시할 시간을 위해 duration 반환\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        # 각 텍스트를 표시하는 함수를 invoke로 예약",
        "detail": "Text_test",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "Text_test",
        "description": "Text_test",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        # 각 텍스트를 표시하는 함수를 invoke로 예약\n        invoke(show_temporary_text, text, interval, delay=total_time)\n        total_time += interval  # 각 텍스트가 표시되는 시간을 누적\n# 텍스트 시퀀스 예제\ntexts = [\"Hello, World!\", \"Welcome to Ursina!\", \"This is a sequence of messages.\"]\n# 텍스트를 순차적으로 2초 간격으로 표시\nshow_text_sequence(texts, interval=2)",
        "detail": "Text_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Text_test",
        "description": "Text_test",
        "peekOfCode": "app = Ursina()\ndef show_temporary_text(text, duration=2):\n    # 텍스트 생성\n    message = Text(text, position=(0, 0.4), origin=(0, 0), scale=2)\n    # 일정 시간 후에 텍스트 제거\n    invoke(message.disable, delay=duration)\n    return duration  # 다음 텍스트를 표시할 시간을 위해 duration 반환\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:",
        "detail": "Text_test",
        "documentation": {}
    },
    {
        "label": "texts",
        "kind": 5,
        "importPath": "Text_test",
        "description": "Text_test",
        "peekOfCode": "texts = [\"Hello, World!\", \"Welcome to Ursina!\", \"This is a sequence of messages.\"]\n# 텍스트를 순차적으로 2초 간격으로 표시\nshow_text_sequence(texts, interval=2)\napp.run()",
        "detail": "Text_test",
        "documentation": {}
    },
    {
        "label": "reduce_health",
        "kind": 2,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "def reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:\n        gameover_text = Text(text='Game Over', position=(-0.1, 0.015), scale=1.5, parent=camera.ui)\ndef reduce_ammo():\n    current_ammo = int(ammo_count.text.split(': ')[1])",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "reduce_ammo",
        "kind": 2,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "def reduce_ammo():\n    current_ammo = int(ammo_count.text.split(': ')[1])\n    if current_ammo > 0:\n        current_ammo -= 1\n        ammo_count.text = f'Ammo: {current_ammo}'\ndef input(key):\n    if key == 'space':\n        reduce_health()\n        reduce_ammo()\n    if key == 'escape':",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "def input(key):\n    if key == 'space':\n        reduce_health()\n        reduce_ammo()\n    if key == 'escape':\n        application.quit()\napp.run()",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "app = Ursina()\n# 플레이어 설정\nplayer = fpc()\n# 바닥 생성\nfloor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "player = fpc()\n# 바닥 생성\nfloor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "floor = Entity(model='plane', scale=(10, 1, 10), texture='white_cube', texture_scale=(10, 10), collider='box')\nhealth_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "health_bar_background",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "health_bar_background = Entity(model='quad', color=color.gray, scale=(0.4, 0.05), position=(-0.5, 0.4, -0.1), parent=camera.ui)\nhealth_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "health_bar",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "health_bar = Entity(model='quad', color=color.green, scale=(0.38, 0.04), position=(-0.5, 0.4, -0.2), parent=camera.ui)\nhealth_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "health_text",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "health_text = Text(text=\"Health\", position=(-0.85, 0.42), scale=1.5, parent=camera.ui)\nammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "ammo_count",
        "kind": 5,
        "importPath": "UI_test",
        "description": "UI_test",
        "peekOfCode": "ammo_count = Text(text='Ammo: 30', position=(0.7, -0.45), scale=2, parent=camera.ui)\nhp=8\ndef reduce_health():\n    global hp\n    if health_bar.scale_x > 0:\n        health_bar.scale_x -= 0.05\n        health_bar.x -= 0.025\n        hp -= 1\n    if hp <= 0:\n        gameover_text = Text(text='Game Over', position=(-0.1, 0.015), scale=1.5, parent=camera.ui)",
        "detail": "UI_test",
        "documentation": {}
    },
    {
        "label": "InteractableCube",
        "kind": 6,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "class InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,\n            scale=scale,\n            rotation=rotation,",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "def input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': \n        player.speed = 5\n    if key == '1':\n        hand.color = color.white\n        if hand_visable == False:",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "show_text",
        "kind": 2,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "def show_text(text, duration=2):\n    message = Text(text, position=(0, -0.2), origin=(0, 0), scale=2)\n    invoke(message.disable, delay=duration)\n    return duration\ndef show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ndef update():",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "show_text_sequence",
        "kind": 2,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "def show_text_sequence(texts, interval=2):\n    total_time = 0\n    for text in texts:\n        invoke(show_text, text, interval, delay=total_time)\n        total_time += interval\ndef update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "def update():\n    global previous_hovered_entity\n    hit_info = raycast(camera.world_position, camera.forward, distance=3)\n    if hit_info.hit and isinstance(hit_info.entity, InteractableCube):\n        hovered_entity = hit_info.entity\n        hovered_entity.on_hover()\n        if held_keys['e']:\n            hovered_entity.interact()\n            if hovered_entity.name == 'man1':\n                show_text(\"hello, I'm 1\", 2)",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "quit_game",
        "kind": 2,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "def quit_game():\n    application.quit()\napp.run()",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "app = Ursina()\n#model import\nmodel_path = 'man.obj'\n#class\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "model_path",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "model_path = 'man.obj'\n#class\nclass InteractableCube(Entity):\n    def __init__(self, name, position=(0, 0, 0), scale=(0, 0, 0), rotation=(0, 0, 0), **kwargs):\n        super().__init__(\n            model='man.obj',\n            name=name,\n            color=color.azure,\n            collider='box',\n            position=position,",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "ground",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "ground = Entity(model='plane', scale=(50, 1, 50), texture='white_cube', texture_scale=(20, 20), collider='box')\nmodel_entity = Entity(model=model_path, scale=(0.4, 0.4, 0.4), color=color.orange, rotation=(-90, 0, 90), position=(0, 0, 0))\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 90, 90))\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "model_entity",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "model_entity = Entity(model=model_path, scale=(0.4, 0.4, 0.4), color=color.orange, rotation=(-90, 0, 90), position=(0, 0, 0))\ncube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 90, 90))\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100\n#UI",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "cube1",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "cube1 = InteractableCube(name='man1', position=(3, 0, 3), scale=(0.4, 0.4, 0.4), rotation=(-90, 0, 90))\ncube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 90, 90))\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "cube2",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "cube2 = InteractableCube(name='man2', position=(-3, 0, -3), scale=(0.4, 0.4, 0.4), rotation=(-90, 90, 90))\n#Tab UI\ncard = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "card",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "card = Entity(model='quad', color=color.gray, scale=(1, 0.6), position=(0, 0), parent=camera.ui)\ncard.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "card.visible",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "card.visible = False\n#fucking player settings\nplayer = FirstPersonController()\ncamera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "player = FirstPersonController()\ncamera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False\nhand.visible = False\ncursur_lock = False",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "camera.fov",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "camera.fov = 100\n#UI\nhand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "hand",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "hand = Entity(parent=camera, model='cube', scale=(0.13, 0.15, 0.13))\nhand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "hand.position",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "hand.position = Vec3(0.5, -0.3, 0.5)\nhand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "hand.rotation",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "hand.rotation = Vec3(0, 90, 0)\n#blogal variables\nhand_visable = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "hand_visable",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "hand_visable = False\nhand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "hand.visible",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "hand.visible = False\ncursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': ",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "cursur_lock",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "cursur_lock = False\ncard_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': \n        player.speed = 5",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "card_visible",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "card_visible = False\nprevious_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': \n        player.speed = 5\n    if key == '1':",
        "detail": "ursina_test",
        "documentation": {}
    },
    {
        "label": "previous_hovered_entity",
        "kind": 5,
        "importPath": "ursina_test",
        "description": "ursina_test",
        "peekOfCode": "previous_hovered_entity = None\ndef input(key):\n    global hand_visable\n    global cursur_lock\n    if key == 'left shift':\n        player.speed = 10\n    if key == 'left shift up': \n        player.speed = 5\n    if key == '1':\n        hand.color = color.white",
        "detail": "ursina_test",
        "documentation": {}
    }
]